/* struct 0.0.1 */ 
 !function() {
    Struct.queue = function() {
        var a = [];
        this.enqueue = function(b) {
            a.push(b);
        }, this.dequeue = function() {
            return a.shift();
        }, this.isEmpty = function() {
            return 0 == a.length;
        }, this.peek = function() {
            return a[0];
        }, this.count = function() {
            return a.length;
        }, this.removeAllObjects = function() {
            a = [];
        };
    }, Struct.binaryNode = function() {
        var a, b;
        this.setLeft = function(b) {
            a = b;
        }, this.setRight = function(a) {
            b = a;
        };
    }, Struct.stack = function() {
        var a = [];
        this.push = function(b) {
            a.push(b);
        }, this.pop = function() {
            return a.pop();
        }, this.isEmpty = function() {
            return 0 == a.length;
        }, this.peek = function() {
            return a[0];
        }, this.count = function() {
            return a.length;
        }, this.removeAllObjects = function() {
            a = [];
        };
    };
}(window), function(a) {
    function b(a, b, d) {
        for (var e = a[d], f = b - 1, g = b; d > g; g++) a[g] <= e && (f++, c(f, g, a));
        return c(f + 1, d, a), f + 1;
    }
    function c(a, b, c) {
        var d = c[a];
        c[a] = c[b], c[b] = d;
    }
    Struct.insertionSort = function(a) {
        if (1 != a.length) for (var b = 1; b < a.length; b++) {
            for (var c = a[b], d = b; d > 0 && a[d - 1] > c; ) a[d] = a[d - 1], d--;
            a[d] = c;
        }
    }, Struct.countingSort = function(a, b) {
        for (var c = [], d = 0; b + 1 > d; d++) c[d] = 0;
        for (var d = 0; d < a.length; d++) c[a[d]]++;
        for (var d = 1; d < c.length; d++) c[d] = c[d] + c[d - 1];
        for (var e = [], d = 0; d < a.length + 1; d++) e[d] = 0;
        for (var f = 0; f < a.length; f++) e[c[a[f]]] = a[f], c[a[f]] = c[a[f]] - 1;
        return e.shift(), e;
    }, Struct.radixSort = function() {}, Struct.quickSort = function(a, c, d) {
        if (d > c) {
            var e = b(a, c, d);
            Struct.quickSort(a, c, e - 1), Struct.quickSort(a, e + 1, d);
        }
    }, a.Struct = Struct;
}(window), function(a) {
    var b = {};
    a.Struct = b;
}(window);